// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	//_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

type AWSECRContainerImageDetails struct {
	Registry       *string `json:"registry,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type BatchCheckLayerAvailabilityRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type BatchDeleteImageRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type BatchGetImageRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type CompleteLayerUploadRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type CompleteLayerUploadResponse struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type CreatePullThroughCacheRuleRequest struct {
	CredentialARN       *string `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	UpstreamRegistry    *string `json:"upstreamRegistry,omitempty"`
	UpstreamRegistryURL *string `json:"upstreamRegistryURL,omitempty"`
}

type CreatePullThroughCacheRuleResponse struct {
	CreatedAt           *metav1.Time `json:"createdAt,omitempty"`
	CredentialARN       *string      `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string      `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string      `json:"registryID,omitempty"`
	UpstreamRegistry    *string      `json:"upstreamRegistry,omitempty"`
	UpstreamRegistryURL *string      `json:"upstreamRegistryURL,omitempty"`
}

type CreateRepositoryRequest struct {
	EncryptionConfiguration    *EncryptionConfiguration    `json:"encryptionConfiguration,omitempty"`
	ImageScanningConfiguration *ImageScanningConfiguration `json:"imageScanningConfiguration,omitempty"`
	ImageTagMutability         *string                     `json:"imageTagMutability,omitempty"`
	RegistryID                 *string                     `json:"registryID,omitempty"`
	RepositoryName             *string                     `json:"repositoryName,omitempty"`
	Tags                       []*Tag                      `json:"tags,omitempty"`
}

type CreateRepositoryResponse struct {
	Repository *Repository_SDK `json:"repository,omitempty"`
}

type DeleteLifecyclePolicyRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DeleteLifecyclePolicyResponse struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type DeletePullThroughCacheRuleRequest struct {
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
}

type DeletePullThroughCacheRuleResponse struct {
	CreatedAt           *metav1.Time `json:"createdAt,omitempty"`
	CredentialARN       *string      `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string      `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string      `json:"registryID,omitempty"`
	UpstreamRegistryURL *string      `json:"upstreamRegistryURL,omitempty"`
}

type DeleteRegistryPolicyResponse struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type DeleteRepositoryPolicyRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DeleteRepositoryPolicyResponse struct {
	PolicyText     *string `json:"policyText,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DeleteRepositoryRequest struct {
	Force          *bool   `json:"force,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DeleteRepositoryResponse struct {
	Repository *Repository_SDK `json:"repository,omitempty"`
}

type DescribeImageReplicationStatusRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DescribeImageReplicationStatusResponse struct {
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DescribeImageScanFindingsRequest struct {
	MaxResults     *int64  `json:"maxResults,omitempty"`
	NextToken      *string `json:"nextToken,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DescribeImageScanFindingsResponse struct {
	NextToken      *string `json:"nextToken,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DescribeImagesRequest struct {
	MaxResults     *int64  `json:"maxResults,omitempty"`
	NextToken      *string `json:"nextToken,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type DescribeImagesResponse struct {
	NextToken *string `json:"nextToken,omitempty"`
}

type DescribePullThroughCacheRulesRequest struct {
	ECRRepositoryPrefixes []*string `json:"ecrRepositoryPrefixes,omitempty"`
	MaxResults            *int64    `json:"maxResults,omitempty"`
	NextToken             *string   `json:"nextToken,omitempty"`
	RegistryID            *string   `json:"registryID,omitempty"`
}

type DescribePullThroughCacheRulesResponse struct {
	NextToken             *string                     `json:"nextToken,omitempty"`
	PullThroughCacheRules []*PullThroughCacheRule_SDK `json:"pullThroughCacheRules,omitempty"`
}

type DescribeRegistryResponse struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type DescribeRepositoriesRequest struct {
	MaxResults      *int64    `json:"maxResults,omitempty"`
	NextToken       *string   `json:"nextToken,omitempty"`
	RegistryID      *string   `json:"registryID,omitempty"`
	RepositoryNames []*string `json:"repositoryNames,omitempty"`
}

type DescribeRepositoriesResponse struct {
	NextToken    *string           `json:"nextToken,omitempty"`
	Repositories []*Repository_SDK `json:"repositories,omitempty"`
}

type EncryptionConfiguration struct {
	EncryptionType *string `json:"encryptionType,omitempty"`
	KMSKey         *string `json:"kmsKey,omitempty"`
}

type EnhancedImageScanFinding struct {
	AWSAccountID *string `json:"awsAccountID,omitempty"`
}

type GetDownloadURLForLayerRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type GetDownloadURLForLayerResponse struct {
	DownloadURL *string `json:"downloadURL,omitempty"`
}

type GetLifecyclePolicyPreviewRequest struct {
	NextToken      *string `json:"nextToken,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type GetLifecyclePolicyPreviewResponse struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	NextToken           *string `json:"nextToken,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type GetLifecyclePolicyRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type GetLifecyclePolicyResponse struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type GetRegistryPolicyResponse struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type GetRegistryScanningConfigurationResponse struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type GetRepositoryPolicyRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type GetRepositoryPolicyResponse struct {
	PolicyText     *string `json:"policyText,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type Image struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type ImageDetail struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type ImageReplicationStatus struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type ImageScanFinding struct {
	URI *string `json:"uri,omitempty"`
}

type ImageScanningConfiguration struct {
	ScanOnPush *bool `json:"scanOnPush,omitempty"`
}

type InitiateLayerUploadRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type InvalidLayerPartException struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type ListImagesRequest struct {
	MaxResults     *int64  `json:"maxResults,omitempty"`
	NextToken      *string `json:"nextToken,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type ListImagesResponse struct {
	NextToken *string `json:"nextToken,omitempty"`
}

type ListTagsForResourceRequest struct {
	ResourceARN *string `json:"resourceARN,omitempty"`
}

type ListTagsForResourceResponse struct {
	Tags []*Tag `json:"tags,omitempty"`
}

type PackageVulnerabilityDetails struct {
	SourceURL *string `json:"sourceURL,omitempty"`
}

type PullThroughCacheRule_SDK struct {
	CreatedAt           *metav1.Time `json:"createdAt,omitempty"`
	CredentialARN       *string      `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string      `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string      `json:"registryID,omitempty"`
	UpdatedAt           *metav1.Time `json:"updatedAt,omitempty"`
	UpstreamRegistry    *string      `json:"upstreamRegistry,omitempty"`
	UpstreamRegistryURL *string      `json:"upstreamRegistryURL,omitempty"`
}

type PutImageRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type PutImageScanningConfigurationRequest struct {
	ImageScanningConfiguration *ImageScanningConfiguration `json:"imageScanningConfiguration,omitempty"`
	RegistryID                 *string                     `json:"registryID,omitempty"`
	RepositoryName             *string                     `json:"repositoryName,omitempty"`
}

type PutImageScanningConfigurationResponse struct {
	ImageScanningConfiguration *ImageScanningConfiguration `json:"imageScanningConfiguration,omitempty"`
	RegistryID                 *string                     `json:"registryID,omitempty"`
	RepositoryName             *string                     `json:"repositoryName,omitempty"`
}

type PutImageTagMutabilityRequest struct {
	ImageTagMutability *string `json:"imageTagMutability,omitempty"`
	RegistryID         *string `json:"registryID,omitempty"`
	RepositoryName     *string `json:"repositoryName,omitempty"`
}

type PutImageTagMutabilityResponse struct {
	ImageTagMutability *string `json:"imageTagMutability,omitempty"`
	RegistryID         *string `json:"registryID,omitempty"`
	RepositoryName     *string `json:"repositoryName,omitempty"`
}

type PutLifecyclePolicyRequest struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type PutLifecyclePolicyResponse struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type PutRegistryPolicyResponse struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type Recommendation struct {
	URL *string `json:"url,omitempty"`
}

type ReplicationDestination struct {
	RegistryID *string `json:"registryID,omitempty"`
}

type RepositoryScanningConfiguration struct {
	RepositoryARN  *string `json:"repositoryARN,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
	ScanOnPush     *bool   `json:"scanOnPush,omitempty"`
}

type RepositoryScanningConfigurationFailure struct {
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type Repository_SDK struct {
	CreatedAt                  *metav1.Time                `json:"createdAt,omitempty"`
	EncryptionConfiguration    *EncryptionConfiguration    `json:"encryptionConfiguration,omitempty"`
	ImageScanningConfiguration *ImageScanningConfiguration `json:"imageScanningConfiguration,omitempty"`
	ImageTagMutability         *string                     `json:"imageTagMutability,omitempty"`
	RegistryID                 *string                     `json:"registryID,omitempty"`
	RepositoryARN              *string                     `json:"repositoryARN,omitempty"`
	RepositoryName             *string                     `json:"repositoryName,omitempty"`
	RepositoryURI              *string                     `json:"repositoryURI,omitempty"`
}

type SetRepositoryPolicyRequest struct {
	Force          *bool   `json:"force,omitempty"`
	PolicyText     *string `json:"policyText,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type SetRepositoryPolicyResponse struct {
	PolicyText     *string `json:"policyText,omitempty"`
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type StartImageScanRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type StartImageScanResponse struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type StartLifecyclePolicyPreviewRequest struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type StartLifecyclePolicyPreviewResponse struct {
	LifecyclePolicyText *string `json:"lifecyclePolicyText,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	RepositoryName      *string `json:"repositoryName,omitempty"`
}

type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

type TagResourceRequest struct {
	ResourceARN *string `json:"resourceARN,omitempty"`
	Tags        []*Tag  `json:"tags,omitempty"`
}

type UntagResourceRequest struct {
	ResourceARN *string `json:"resourceARN,omitempty"`
}

type UpdatePullThroughCacheRuleRequest struct {
	CredentialARN       *string `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
}

type UpdatePullThroughCacheRuleResponse struct {
	CredentialARN       *string      `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string      `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string      `json:"registryID,omitempty"`
	UpdatedAt           *metav1.Time `json:"updatedAt,omitempty"`
}

type UploadLayerPartRequest struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type UploadLayerPartResponse struct {
	RegistryID     *string `json:"registryID,omitempty"`
	RepositoryName *string `json:"repositoryName,omitempty"`
}

type ValidatePullThroughCacheRuleRequest struct {
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
}

type ValidatePullThroughCacheRuleResponse struct {
	CredentialARN       *string `json:"credentialARN,omitempty"`
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty"`
	RegistryID          *string `json:"registryID,omitempty"`
	UpstreamRegistryURL *string `json:"upstreamRegistryURL,omitempty"`
}
